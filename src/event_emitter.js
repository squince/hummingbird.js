// Generated by CoffeeScript 2.5.1
(function() {
  // ## EventEmitter
  // Manages adding, removing, and triggering events handlers

  // ### constructor
  hummingbird.EventEmitter = function() {
    this.events = {};
  };

  // ### ::addListener
  // Binds a handler function to specific events
  // Can bind a single function to many different events in one call
  hummingbird.EventEmitter.prototype.addListener = function() {
    var args, fn, names;
    args = Array.prototype.slice.call(arguments);
    fn = args.pop();
    names = args;
    if (typeof fn !== 'function') {
      throw new TypeError('last argument must be a function');
    }
    names.forEach((function(name) {
      if (!this.hasHandler(name)) {
        this.events[name] = [];
      }
      this.events[name].push(fn);
    }), this);
  };

  // ### ::removeListener
  // Removes a handler function from a specific event
  hummingbird.EventEmitter.prototype.removeListener = function(name, fn) {
    var fnIndex;
    if (!this.hasHandler(name)) {
      return;
    }
    fnIndex = this.events[name].indexOf(fn);
    this.events[name].splice(fnIndex, 1);
    if (!this.events[name].length) {
      delete this.events[name];
    }
  };

  // ### ::emit
  // Calls all functions bound to the given event
  hummingbird.EventEmitter.prototype.emit = function(name) {
    var args;
    if (!this.hasHandler(name)) {
      return;
    }
    args = Array.prototype.slice.call(arguments, 1);
    this.events[name].forEach(function(fn) {
      fn.apply(undefined, args);
    });
  };

  // ### ::hasHandler
  // Checks whether a handler has ever been stored against an event.
  hummingbird.EventEmitter.prototype.hasHandler = function(name) {
    return name in this.events;
  };

}).call(this);
