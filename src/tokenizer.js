// Generated by CoffeeScript 2.5.1
(function() {
  // ## Tokenizer
  // A flexible ngram tokenizer that can index a string using a range of lengths
  // for substrings suitable for autocomplete indexing and fuzzy name matching

  // ### constructor
  hummingbird.tokenizer = function(min, max) {
    this.utils = new hummingbird.Utils();
    if (!arguments.length || (min == null) || typeof min !== 'number' || min < 1) {
      this.min = 3;
    } else {
      this.min = min;
    }
    if (arguments.length < 2 || (max == null) || typeof max !== 'number' || max < min) {
      this.max = this.min;
    } else {
      this.max = max;
    }
  };

  // ### ::tokenize
  // Splits a string into ngram tokens

  // To boost prefix matches, a start character \u0002 is prepended to the string
  // and used in the ngrams. This causes a sequence of characters at the start of both
  // a search query and a sought term to more tightly match than a similar series of
  // characters elsewhere in sought terms.

  // See utils.normalizeString()
  hummingbird.tokenizer.prototype.tokenize = function(name) {
    var alltokens, i, n, norm_name;
    norm_name = this.utils.normalizeString(name);
    if (norm_name == null) {
      return [];
    }
    alltokens = {};
    n = this.min;
    while (n <= this.max) {
      if (norm_name.length <= n) {
        alltokens[norm_name] = null;
      } else {
        i = 0;
        while (i <= norm_name.length - n) {
          alltokens[norm_name.slice(i, i + n)] = null;
          i++;
        }
      }
      n++;
    }
    return Object.keys(alltokens);
  };

}).call(this);
